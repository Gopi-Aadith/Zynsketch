import React from 'react';
import BeforeAfterSlider from './BeforeAfterSlider';  // adjust the path accordingly

const MyCustomComponent = () => {
  return (
    <div className="max-w-4xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Before and After Example</h1>
      <div className="h-96 md:h-[500px] border">
        <BeforeAfterSlider 
          beforeImage="https://example.com/path/to/before-image.jpg" 
          afterImage="https://example.com/path/to/after-image.jpg" 
          beforeAlt="Before correction" 
          afterAlt="After correction"
        />
      </div>
    </div>
  );
};

export default MyCustomComponent;



// BeforeAfterSlider.jsx
import React, { useState, useRef, useEffect } from 'react';
import './BeforeAfterSlider.css'; // Import the corresponding CSS file

const BeforeAfterSlider = ({ beforeImage, afterImage, beforeAlt = "Before", afterAlt = "After" }) => {
  const [sliderPosition, setSliderPosition] = useState(50);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef(null);

  const handleMove = (clientX) => {
    const container = containerRef.current;
    if (!container) return;
    
    const { left, width } = container.getBoundingClientRect();
    let position = ((clientX - left) / width) * 100;
    
    // Clamp position between 1 and 99 to avoid edge issues
    position = Math.max(1, Math.min(99, position));
    setSliderPosition(position);
  };

  const handleMouseDown = (e) => {
    e.preventDefault();
    setIsDragging(true);
    handleMove(e.clientX);
  };

  const handleTouchStart = (e) => {
    setIsDragging(true);
    handleMove(e.touches[0].clientX);
  };

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDragging) {
        handleMove(e.clientX);
      }
    };

    const handleTouchMove = (e) => {
      if (isDragging && e.touches[0]) {
        handleMove(e.touches[0].clientX);
      }
    };

    const handleEnd = () => {
      setIsDragging(false);
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleEnd);
    document.addEventListener('touchmove', handleTouchMove, { passive: false });
    document.addEventListener('touchend', handleEnd);

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleEnd);
      document.removeEventListener('touchmove', handleTouchMove);
      document.removeEventListener('touchend', handleEnd);
    };
  }, [isDragging]);

  // Prevent default touch behavior to avoid page scrolling during slider interaction
  useEffect(() => {
    const preventDefaultTouch = (e) => {
      if (isDragging) {
        e.preventDefault();
      }
    };
    
    document.addEventListener('touchmove', preventDefaultTouch, { passive: false });
    
    return () => {
      document.removeEventListener('touchmove', preventDefaultTouch);
    };
  }, [isDragging]);

  return (
    <div 
      ref={containerRef}
      className="before-after-slider-container"
      style={{ touchAction: isDragging ? 'none' : 'auto' }}
    >
      {/* After Image - Full width in background */}
      <img 
        src={afterImage} 
        alt={afterAlt}
        className="after-image"
      />
      
      {/* Before Image - In foreground with clip path */}
      <div 
        className="before-image-wrapper"
        style={{ 
          clipPath: `polygon(0 0, ${sliderPosition}% 0, ${sliderPosition}% 100%, 0 100%)`
        }}
      >
        <img 
          src={beforeImage} 
          alt={beforeAlt}
          className="before-image"
        />
      </div>

      {/* Slider Line */}
      <div 
        className="slider-line"
        style={{ left: `${sliderPosition}%` }}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
      >
        {/* Circle Handle */}
        <div className="slider-handle">
          {/* Arrow Icons */}
          <div className="arrow-icons">
            <svg xmlns="http://www.w3.org/2000/svg" width="8" height="12" viewBox="0 0 8 12" fill="none">
              <path d="M7 1L1 6L7 11" stroke="#333" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="8" height="12" viewBox="0 0 8 12" fill="none">
              <path d="M1 1L7 6L1 11" stroke="#333" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </div>
        </div>
      </div>

      {/* Reference Circle */}
      <div 
        className="reference-circle"
        style={{ 
          left: sliderPosition > 50 ? '15%' : '85%', 
        }}
      >
        Reference
      </div>
    </div>
  );
};

export default BeforeAfterSlider;




/* BeforeAfterSlider.css */

.before-after-slider-container {
  position: relative;
  width: 100%;
  height: 100%;
  user-select: none;
}

.after-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.before-image-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.before-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.slider-line {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 2px;
  background-color: white;
  cursor: col-resize;
}

.slider-handle {
  position: absolute;
  background-color: white;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  width: 40px;
  height: 40px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  justify-content: center;
}

.arrow-icons {
  display: flex;
  justify-content: space-between;
  width: 16px;
}

.reference-circle {
  position: absolute;
  top: 20%;
  width: 80px;
  height: 80px;
  background-color: rgba(55, 65, 81, 0.8);
  color: white;
  text-align: center;
  border-radius: 50%;
  font-size: 12px;
  line-height: 80px;
  transform: translate(-50%, -50%);
  z-index: 5;
}

